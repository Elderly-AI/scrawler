// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/crawler/crawler.proto

package crawler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerClient interface {
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	GetLessonsCountByTags(ctx context.Context, in *GetLessonsCountByTagsRequest, opts ...grpc.CallOption) (*GetLessonsCountByTagsResponse, error)
	CheatExternalData(ctx context.Context, in *CheatExternalDataRequest, opts ...grpc.CallOption) (*CheatExternalDataResponse, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) GetLessonsCountByTags(ctx context.Context, in *GetLessonsCountByTagsRequest, opts ...grpc.CallOption) (*GetLessonsCountByTagsResponse, error) {
	out := new(GetLessonsCountByTagsResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/GetLessonsCountByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) CheatExternalData(ctx context.Context, in *CheatExternalDataRequest, opts ...grpc.CallOption) (*CheatExternalDataResponse, error) {
	out := new(CheatExternalDataResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/CheatExternalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerServer is the server API for Crawler service.
// All implementations must embed UnimplementedCrawlerServer
// for forward compatibility
type CrawlerServer interface {
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	GetLessonsCountByTags(context.Context, *GetLessonsCountByTagsRequest) (*GetLessonsCountByTagsResponse, error)
	CheatExternalData(context.Context, *CheatExternalDataRequest) (*CheatExternalDataResponse, error)
	mustEmbedUnimplementedCrawlerServer()
}

// UnimplementedCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (UnimplementedCrawlerServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedCrawlerServer) GetLessonsCountByTags(context.Context, *GetLessonsCountByTagsRequest) (*GetLessonsCountByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonsCountByTags not implemented")
}
func (UnimplementedCrawlerServer) CheatExternalData(context.Context, *CheatExternalDataRequest) (*CheatExternalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheatExternalData not implemented")
}
func (UnimplementedCrawlerServer) mustEmbedUnimplementedCrawlerServer() {}

// UnsafeCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServer will
// result in compilation errors.
type UnsafeCrawlerServer interface {
	mustEmbedUnimplementedCrawlerServer()
}

func RegisterCrawlerServer(s grpc.ServiceRegistrar, srv CrawlerServer) {
	s.RegisterService(&Crawler_ServiceDesc, srv)
}

func _Crawler_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_GetLessonsCountByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonsCountByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).GetLessonsCountByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/GetLessonsCountByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).GetLessonsCountByTags(ctx, req.(*GetLessonsCountByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_CheatExternalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheatExternalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).CheatExternalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/CheatExternalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).CheatExternalData(ctx, req.(*CheatExternalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crawler_ServiceDesc is the grpc.ServiceDesc for Crawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTags",
			Handler:    _Crawler_GetTags_Handler,
		},
		{
			MethodName: "GetLessonsCountByTags",
			Handler:    _Crawler_GetLessonsCountByTags_Handler,
		},
		{
			MethodName: "CheatExternalData",
			Handler:    _Crawler_CheatExternalData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/crawler/crawler.proto",
}
